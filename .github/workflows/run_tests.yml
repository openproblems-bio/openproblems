name: Run Tests

on:
  push:
    tags:
      - '*'
    branches:
      - '**'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  cancel_previous_runs:
    if: |
      !endsWith(github.event.head_commit.message, '# ci skip') &&
      (
        startsWith(github.ref, 'refs/heads') ||
        startsWith(github.ref, 'refs/tags') ||
        github.event.pull_request.draft == false
      )
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

  build_images:

    needs: cancel_previous_runs
    runs-on: ubuntu-18.04
    if: |
      !endsWith(github.event.head_commit.message, '# ci skip') &&
      (
        startsWith(github.ref, 'refs/heads/test_docker') ||
        (
          startsWith(github.ref, 'refs/heads/main') &&
          github.repository == 'openproblems-bio/openproblems'
        )
      )

    env:
      BRANCH_NAME: "auto_update_docker_${{ github.run_number }}"

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1000

    - name: Clear space on runner
      run: ./scripts/clear_runner_diskspace.sh

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"

    - name: Install package & dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U wheel setuptools
        pip install --editable .[evaluate]
        python -c "import openproblems"

    - name: Build Docker images
      if: "!startsWith(github.ref, 'refs/heads/main')"
      run: |
        cd workflow
        snakemake -j $(nproc) docker_build
        cd ..

    - name: Push Docker images
      if: "startsWith(github.ref, 'refs/heads/main')"
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        cd workflow
        snakemake -j $(nproc) docker_build docker_push
        cd ..
        echo "CHANGED=`git diff --exit-code > /dev/null && echo false || echo true`" >> $GITHUB_ENV

    - name: Set up Git branch
      if: env.CHANGED == 'true' && startsWith(github.ref, 'refs/heads/main')
      run: |
        git checkout -b $BRANCH_NAME
        git push -u origin $BRANCH_NAME

    - name: Commit result
      if: env.CHANGED == 'true' && startsWith(github.ref, 'refs/heads/main')
      uses: EndBug/add-and-commit@v6
      with:
        author_name: SingleCellOpenProblems
        author_email: singlecellopenproblems@protonmail.com
        message: 'Update docker version # ci skip'
        add: "docker/.version"
        branch: ${{ env.BRANCH_NAME }}
        push: false

    - name: Create Pull Request
      if: env.CHANGED == 'true' && startsWith(github.ref, 'refs/heads/main')
      uses: peter-evans/create-pull-request@v3
      with:
        branch: ${{ env.BRANCH_NAME }}
        delete-branch: true
        base: main
        title: '[auto] Update docker version'
        reviewers: scottgigante, dburkhardt

    - name: Upload check results on fail
      if: failure()
      uses: actions/upload-artifact@main
      with:
        name: ${{ matrix.config.name }}_results
        path: check

  run_tester:
    runs-on: ubuntu-latest

    container:
      image: singlecellopenproblems/openproblems-github-actions:latest
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - /tmp:/tmp
        - /opt/az:/opt/remove/az
        - /usr/lib/google-cloud-sdk:/opt/remove/google-cloud-sdk
        - /usr/lib/jvm:/opt/remove/jvm
        - /opt/google/chrome:/opt/remove/chrome
        - /usr/lib/firefox:/opt/remove/firefox
        - /opt/microsoft/powershell:/opt/remove/powershell
        - /usr/share/dotnet:/opt/remove/dotnet
        - /opt/ghc:/opt/remove/ghc
        - /opt/hostedtoolcache:/opt/remove/hostedtoolcache
        - /usr/local/lib/android:/opt/remove/android
      options: --user root

    needs: build_images
    if: |
      always() &&
      (needs.build_images.result == 'success' || needs.build_images.result == 'skipped') &&
      !endsWith(github.event.head_commit.message, '# ci skip') &&
      (
        startsWith(github.ref, 'refs/heads') ||
        startsWith(github.ref, 'refs/tags') ||
        github.event.pull_request.draft == false
      ) &&
      !startsWith(github.ref, 'refs/heads/test_docker') &&
      !startsWith(github.ref, 'refs/heads/test_benchmark') &&
      !startsWith(github.ref, 'refs/heads/test_process')

    steps:
    - name: Clear space on runner
      run: |
        sudo rm -rf /opt/remove/*/*

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up environment
      run: |
        echo "LINUX_VERSION=$(uname -a)" >> $GITHUB_ENV
        echo "PYTHON_VERSION=$(python --version)" >> $GITHUB_ENV
        echo "R_VERSION=$(R --version | head -n 1)" >> $GITHUB_ENV

    - name: Cache Python packages
      uses: actions/cache@v2
      with:
        path: ${{ env.PYTHON_VERSION }}
        key: ${{env.LINUX_VERSION}}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py') }}
        restore-keys: ${{env.LINUX_VERSION}}-pip-${{ env.PYTHON_VERSION }}-

    - name: Install package & dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U wheel setuptools
        pip install -U --editable .[test,r,evaluate]
        python -c "import openproblems"

    - name: Cache R packages
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Linux')
      with:
        path: /usr/local/lib/R/site-library
        key: ${{ env.LINUX_VERSION }}-renv-${{ env.R_VERSION }}-${{ hashFiles('**/renv.lock') }}
        restore-keys: |
          ${{ env.LINUX_VERSION }}-renv-${{ env.R_VERSION }}-

    - name: Install R packages
      run: |
        if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv")
        renv::restore()
        source("./scripts/install_renv.R")
        install_renv("docker/openproblems-r-base/r_requirements.txt")
      shell: Rscript {0}

    - name: Pull Docker images
      if: "startsWith(github.ref, 'refs/heads/main') && github.repository == 'openproblems-bio/openproblems'"
      run: |
        cd workflow
        snakemake -j $(nproc) docker_pull
        cd ..

    - name: Update Docker images
      if: "!(startsWith(github.ref, 'refs/heads/main') && github.repository == 'openproblems-bio/openproblems')"
      run: |
        cd workflow
        snakemake -j $(nproc) docker
        cd ..

    - name: Run tests
      run: pytest --cov=openproblems --cov-report=xml -vv --maxfail=2

    - name: Upload coverage
      continue-on-error: ${{ github.repository != 'openproblems-bio/openproblems' }}
      run: codecov --no-color --required --flags unittests

    - name: Upload check results on fail
      if: failure()
      uses: actions/upload-artifact@main
      with:
        name: ${{ matrix.config.name }}_results
        path: results


  run_test_benchmark:
    needs: run_tester
    runs-on: ubuntu-18.04
    if: >-
      always() &&
      !endsWith(github.event.head_commit.message, '# ci skip') &&
      github.event_name == 'push' &&
      (
        needs.run_tester.result == 'success' ||
        startsWith(github.ref, 'refs/heads/test_benchmark')
      )

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1000

    - name: Clear space on runner
      run: ./scripts/clear_runner_diskspace.sh

    - name: Install system dependencies
      run: |
        sudo apt-get update -qq || (sudo rm /etc/apt/sources.list.d/* && sudo apt-get update -yqq)
        sudo apt-get install -qy --no-install-recommends libhdf5-dev pandoc gfortran libblas-dev liblapack-dev libedit-dev llvm-dev

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"

    - name: Set up Java ${{ matrix.java_version }}
      uses: actions/setup-java@v1
      with:
        java-version: 15
        architecture: x64

    - name: Set up environment
      run: |
        SCRIPTS_PATH=$(python3 -c 'import os, sysconfig; print(sysconfig.get_path("scripts",f"{os.name}_user"))')
        echo "PATH=${SCRIPTS_PATH}:${PATH}" >> $GITHUB_ENV
        echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV
        echo "PYTHON_LOCATION=$(which python3)" >> $GITHUB_ENV
        echo "UBUNTU_VERSION=`grep DISTRIB_RELEASE /etc/lsb-release | sed 's/.*=//g'`" >> $GITHUB_ENV
        # If not on the base repository, append first 6 characters of username to the image name
        # to avoid clashes on ECR
        if [[ "${{ github.repository }}" == "openproblems-bio/openproblems" ]]; then
          echo "BRANCH=`echo ${{ github.ref }} | sed 's:refs/[a-z]*/::' | sed 's:[/_]:-:g'| head -c 40`"; \
        else
          echo "BRANCH=`echo ${{ github.repository }} | awk '{print $1}' FS=/ | head -c 6`-`echo ${{ github.ref }} | sed 's:refs/[a-z]*/::' | sed 's:[/_]:-:g'| head -c 33`"; \
        fi >> $GITHUB_ENV

    - name: Cache Python packages
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.UBUNTU_VERSION }}-pip-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}
        restore-keys: ${{ env.UBUNTU_VERSION}}-pip-${{ env.pythonLocation }}-

    - name: Install Nextflow
      env:
          CAPSULE_LOG: none
          NXF_VER: 22.04.0
      run: |
        mkdir /tmp/nextflow
        cd /tmp/nextflow
        wget -qO- get.nextflow.io | bash
        sudo ln -s /tmp/nextflow/nextflow /usr/local/bin/nextflow
        nextflow -version

    - name: Install AWS CLI
      run: |
        mkdir /tmp/awscli
        cd /tmp/awscli
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install || sudo ./aws/install --update
        aws --version

    - name: Set up S3FS
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-west-2
      run: |
        sudo apt-get install -qy --no-install-recommends s3fs
        echo $AWS_ACCESS_KEY_ID:$AWS_SECRET_ACCESS_KEY > ~/.passwd-s3fs
        chmod 600 ~/.passwd-s3fs
        sudo mkdir -p /mnt/openproblems-nextflow
        sudo chown $USER /mnt/openproblems-nextflow
        s3fs -o umask=0277,uid=$(id -u) openproblems-nextflow /mnt/openproblems-nextflow
        # Create bucket/ work/ and cwd/
        for dir in bucket work cwd; do
          mkdir -p /mnt/openproblems-nextflow/${dir}/${BRANCH}
        done
        ls -l /mnt/openproblems-nextflow/*/${BRANCH}

    - name: Install package & dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U wheel setuptools
        pip install -U --editable .[evaluate,process]
        python -c "import openproblems"
        openproblems-cli --version
        openproblems-cli --test-hash

    - name: Pull Docker images
      if: |
        startsWith(github.ref, 'refs/heads/main') &&
        github.repository == 'openproblems-bio/openproblems'
      run: |
        cd workflow
        snakemake -j $(nproc) docker_pull
        cd ..

    - name: Build Docker images
      if: |
        !(
          startsWith(github.ref, 'refs/heads/main') &&
          github.repository == 'openproblems-bio/openproblems'
        )
      run: |
        cd workflow
        snakemake -j $(nproc) docker
        cd ..

    - name: Upload Docker images
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-west-2
      run: |
        ECR_ENDPOINT="490915662541.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | \
          docker login --username AWS --password-stdin $ECR_ENDPOINT
        for image in $(cd docker && ls -1d */ | tr -d '/'); do
          docker tag singlecellopenproblems/${image} ${ECR_ENDPOINT}/openproblems:${BRANCH}-${image}
          docker push --quiet ${ECR_ENDPOINT}/openproblems:${BRANCH}-${image}
        done

    - name: Run test benchmark
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TOWER_ACCESS_TOKEN: ${{ secrets.TOWER_ACCESS_KEY }}
        TOWER_WORKSPACE_ID: 53907369739130
        AWS_DEFAULT_REGION: us-west-2
        NXF_DEFAULT_DSL: 1
      run: |
        RUN_NAME="$(echo "$BRANCH" | sed "s/[^a-zA-Z0-9]//g")_$(git rev-parse --short HEAD)_${GITHUB_RUN_ATTEMPT}"
        cd /mnt/openproblems-nextflow/cwd/${BRANCH}
        nextflow run \
        -revision v1.4 \
        -with-tower \
        -ansi-log false -resume \
        -profile aws,test \
        -work-dir "/mnt/openproblems-nextflow/work/${BRANCH}" \
        -bucket-dir "s3://openproblems-nextflow/bucket/${BRANCH}" \
        -name "${RUN_NAME}" \
        -e.PYTHONPATH="${PYTHONPATH}" \
        openproblems-bio/nf-openproblems \
        --branch ${BRANCH} | \
        tee >(grep --color=never --line-buffered "Monitor the execution with Nextflow Tower using this url" >> $GITHUB_STEP_SUMMARY)
      shell: /bin/bash -eou pipefail {0}

    - name: Parse results
      run: |
        python workflow/parse_nextflow.py /mnt/openproblems-nextflow/cwd/${BRANCH} /tmp/website

    - name: Upload nextflow log
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: nextflow.log
        path: /mnt/openproblems-nextflow/cwd/${{ env.BRANCH }}/.nextflow.log

    - name: AWS ECR cleanup
      if: |
        !(
          startsWith(github.ref, 'refs/heads/main') &&
          github.repository == 'openproblems-bio/openproblems'
        )
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-west-2
      run: |
        for image in $(cd docker && ls -1d */ | tr -d '/'); do
          aws ecr batch-delete-image --region $AWS_DEFAULT_REGION --repository-name openproblems --image-ids "imageTag=${BRANCH}-${image}"
        done

    - name: AWS S3 cleanup
      if: |
        success() ||
        startsWith(github.ref, 'refs/heads/main') ||
        startsWith(github.ref, 'refs/tags')
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-west-2
      run: |
        aws s3 rm --recursive "s3://openproblems-nextflow/work/${{ env.BRANCH }}"
        aws s3 rm --recursive "s3://openproblems-nextflow/bucket/${{ env.BRANCH }}"
        aws s3 rm --recursive "s3://openproblems-nextflow/cwd/${{ env.BRANCH }}"

  run_full_benchmark:
    needs: run_test_benchmark
    runs-on: ubuntu-latest
    if: >-
      always() &&
      (needs.run_test_benchmark.result == 'success' || needs.run_test_benchmark.result == 'skipped') &&
      !endsWith(github.event.head_commit.message, '# ci skip') &&
      github.event_name == 'push' &&
      (
        startsWith(github.ref, 'refs/tags') ||
        startsWith(github.ref, 'refs/heads/test_benchmark')
      )

    steps:

    - name: Run full benchmark
      env:
        TOWER_WATCH_URL: https://tower.nf/orgs/openproblems-bio/workspaces/openproblems-bio/watch
        TOWER_WORKSPACE_ID: 53907369739130
        TOWER_ACTION_ID: 5ww3OCEyCgdyTHdTFJLZJ9
      run: |
        generate_parameters()
        {
        cat <<EOF
          {
            "params" : {
              "branch": "main"
            }
          }
        EOF
        }
        WORKFLOW_ID=$(
            curl -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.TOWER_ACCESS_KEY }}" \
            https://api.tower.nf/actions/${TOWER_ACTION_ID}/launch?workspaceId=${TOWER_WORKSPACE_ID} \
            --data "$(generate_parameters)" | \
            tee /dev/stderr | \
            sed 's/.*"\([a-zA-Z0-9]*\)".*/\1/'
        )
        echo "Full benchmark running at ${TOWER_WATCH_URL}/${WORKFLOW_ID}" >> $GITHUB_STEP_SUMMARY
