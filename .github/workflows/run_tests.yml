name: Run Tests

on:
  push:
    tags:
      - '*'
    branches:
      - '**'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  cancel_previous_runs:
    if: |
      !endsWith(github.event.head_commit.message, '# ci skip') &&
      (
        startsWith(github.ref, 'refs/heads') ||
        startsWith(github.ref, 'refs/tags') ||
        github.event.pull_request.draft == false
      )
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

  build_images:

    needs: cancel_previous_runs
    runs-on: ubuntu-latest
    if: |
      !endsWith(github.event.head_commit.message, '# ci skip') &&
      (
        startsWith(github.ref, 'refs/heads/test_docker') ||
        (
          startsWith(github.ref, 'refs/heads/main') &&
          github.repository == 'openproblems-bio/openproblems'
        )
      )

    env:
      BRANCH_NAME: "auto_update_docker_${{ github.run_number }}"

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1000

    - name: Clear space on runner
      run: ./scripts/clear_runner_diskspace.sh

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.8"

    - name: Install package & dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U wheel setuptools
        pip install --editable .[evaluate]
        python -c "import openproblems"

    - name: Build Docker images
      if: "!startsWith(github.ref, 'refs/heads/main')"
      run: |
        cd workflow
        snakemake -j $(nproc) docker_build
        cd ..

    - name: Build and push Docker images
      if: "startsWith(github.ref, 'refs/heads/main')"
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        cd workflow
        snakemake -j $(nproc) docker_build docker_push
        cd ..
        echo "CHANGED=`git diff --exit-code > /dev/null && echo false || echo true`" >> $GITHUB_ENV

    - name: Create Pull Request
      if: env.CHANGED == 'true' && startsWith(github.ref, 'refs/heads/main')
      uses: peter-evans/create-pull-request@v4
      with:
        branch: ${{ env.BRANCH_NAME }}
        delete-branch: true
        base: main
        title: '[auto] Update docker version'
        reviewers: scottgigante, dburkhardt
        author: "openproblems-bio <singlecellopenproblems@protonmail.com>"
        commit-message: "Update docker version # ci skip"
        add-paths: docker/.version

    - name: Upload check results on fail
      if: failure()
      uses: actions/upload-artifact@main
      with:
        name: ${{ matrix.config.name }}_results
        path: check

  run_tester:
    runs-on: ubuntu-latest

    container:
      image: singlecellopenproblems/openproblems-github-actions:latest
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - /tmp:/tmp
        - /opt/az:/opt/remove/az
        - /usr/lib/google-cloud-sdk:/opt/remove/google-cloud-sdk
        - /usr/lib/jvm:/opt/remove/jvm
        - /opt/google/chrome:/opt/remove/chrome
        - /usr/lib/firefox:/opt/remove/firefox
        - /opt/microsoft/powershell:/opt/remove/powershell
        - /usr/share/dotnet:/opt/remove/dotnet
        - /opt/ghc:/opt/remove/ghc
        - /opt/hostedtoolcache:/opt/remove/hostedtoolcache
        - /usr/local/lib/android:/opt/remove/android
      options: --user root

    needs: build_images
    if: |
      always() &&
      (needs.build_images.result == 'success' || needs.build_images.result == 'skipped') &&
      !endsWith(github.event.head_commit.message, '# ci skip') &&
      (
        startsWith(github.ref, 'refs/heads') ||
        startsWith(github.ref, 'refs/tags') ||
        github.event.pull_request.draft == false
      ) &&
      !startsWith(github.ref, 'refs/heads/test_docker') &&
      !startsWith(github.ref, 'refs/heads/test_benchmark') &&
      !startsWith(github.ref, 'refs/heads/test_full_benchmark') &&
      !startsWith(github.ref, 'refs/heads/test_process')

    steps:
    - name: Clear space on runner
      run: |
        sudo rm -rf /opt/remove/*/*

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up environment
      run: |
        echo "LINUX_VERSION=$(uname -a)" >> $GITHUB_ENV
        echo "PYTHON_VERSION=$(python --version)" >> $GITHUB_ENV
        echo "R_VERSION=$(R --version | head -n 1)" >> $GITHUB_ENV

    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ${{ env.PYTHON_VERSION }}
        key: ${{env.LINUX_VERSION}}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py') }}
        restore-keys: ${{env.LINUX_VERSION}}-pip-${{ env.PYTHON_VERSION }}-

    - name: Install package & dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U wheel setuptools
        pip install -U --editable .[test,r,evaluate]
        python -c "import openproblems"

    - name: Cache R packages
      uses: actions/cache@v3
      if: startsWith(runner.os, 'Linux')
      with:
        path: /usr/local/lib/R/site-library
        key: ${{ env.LINUX_VERSION }}-renv-${{ env.R_VERSION }}-${{ hashFiles('**/renv.lock') }}
        restore-keys: |
          ${{ env.LINUX_VERSION }}-renv-${{ env.R_VERSION }}-

    - name: Install R packages
      run: |
        if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv")
        renv::restore()
        source("./scripts/install_renv.R")
        install_renv("docker/openproblems-r-base/r_requirements.txt")
        install_renv("docker/openproblems-github-actions/r_requirements.txt")
      shell: Rscript {0}

    - name: Pull Docker images
      if: "startsWith(github.ref, 'refs/heads/main') && github.repository == 'openproblems-bio/openproblems'"
      run: |
        cd workflow
        snakemake -j $(nproc) docker_pull
        cd ..

    - name: Update Docker images
      if: "!(startsWith(github.ref, 'refs/heads/main') && github.repository == 'openproblems-bio/openproblems')"
      run: |
        cd workflow
        snakemake -j $(nproc) docker
        cd ..

    - name: Run tests
      run: pytest --cov=openproblems --cov-report=xml -vv --durations=15 --tb=native

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unittests
        fail_ci_if_error: ${{ github.repository == 'openproblems-bio/openproblems' }}
        verbose: true

    - name: Upload check results on fail
      if: failure()
      uses: actions/upload-artifact@main
      with:
        name: ${{ matrix.config.name }}_results
        path: results


  run_test_benchmark:
    needs: run_tester
    runs-on: ubuntu-latest
    if: >-
      always() &&
      !endsWith(github.event.head_commit.message, '# ci skip') &&
      github.event_name == 'push' &&
      (
        needs.run_tester.result == 'success'||
        startsWith(github.ref, 'refs/heads/test_benchmark') ||
        startsWith(github.ref, 'refs/heads/test_full_benchmark')
      )

    steps:
    - name: Check dependabot
      run: |
        if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
          echo "Dependabot cannot access Action secrets. Rerun the workflow manually"
          exit 1
        fi

    - uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: Check Tower authentication
      env:
        TOWER_ACCESS_TOKEN: ${{ secrets.TOWER_ACCESS_KEY }}
        TOWER_ORG_ID: 9180144064527
        TOWER_WORKSPACE_ID: 53907369739130
      run: |
        token_confirmation=$(
          curl -X GET "https://api.tower.nf/user-info" \
          -H "Accept: application/json" \
          -H "Authorization: Bearer ${TOWER_ACCESS_TOKEN}"
        )
        if [ -z "${token_confirmation}" ]; then
          echo "Tower authentication failed; set TOWER_ACCESS_KEY in repo secrets."
          echo "See CONTRIBUTING.md for details."
          exit 1
        fi
        workspace_confirmation=$(
          curl -X GET "https://api.tower.nf/orgs/${TOWER_ORG_ID}/workspaces/${TOWER_WORKSPACE_ID}" \
          -H "Accept: application/json" \
          -H "Authorization: Bearer ${TOWER_ACCESS_TOKEN}"
        )
        if [ -z "${workspace_confirmation}" ]; then
          echo "Tower authentication failed; email singlecellopenproblems@protonmail.com with a request to be added to the openproblems-bio workspace"
          exit 1
        fi

    - name: Set up environment
      run: |
        # If not on the base repository, append first 6 characters of username to the image name
        # to avoid clashes on ECR
        REPO_PARSED=$(echo ${{ github.repository }} | awk '{print $1}' FS=/ | head -c 6)
        BRANCH_PARSED=$(echo ${{ github.ref }} | sed 's:refs/[a-z]*/::' | sed 's:[^a-zA-Z0-9]:-:g')
        if [[ ${{ startsWith(github.ref, 'refs/tags') || startsWith(github.ref, 'refs/heads/test_full_benchmark') }} == true ]]; then
          BRANCH="prod"
        elif [[ "${{ github.repository }}" == "openproblems-bio/openproblems" ]]; then
          BRANCH=`echo $BRANCH_PARSED | head -c 40`
        else
          BRANCH="${REPO_PARSED}-`echo $BRANCH_PARSED | head -c 33`"
        fi
        BRANCH=`echo $BRANCH | sed 's/[^a-zA-Z0-9]*$//'`
        echo "BRANCH=${BRANCH}" >> $GITHUB_ENV

    - name: Run benchmark
      env:
        TOWER_WATCH_URL: https://tower.nf/orgs/openproblems-bio/workspaces/openproblems-bio/watch
        TOWER_WORKSPACE_ID: 53907369739130
      run: |
        RUN_NAME="$(echo "$BRANCH" | sed "s/[^a-zA-Z0-9]/_/g")_$(git rev-parse --short HEAD)_${GITHUB_RUN_ATTEMPT}"
        if [[ ${{ startsWith(github.ref, 'refs/tags') || startsWith(github.ref, 'refs/heads/test_full_benchmark') }} == true ]]; then
          TOWER_ACTION_ID="bVQhVSNah1JmJfnKkfyjg"
          WORKDIR="s3://openproblems-nextflow/work_main"
        else
          TOWER_ACTION_ID="5BQc88ZvjuXCYbc55Hot27"
          WORKDIR="s3://openproblems-nextflow/work/$BRANCH"
        fi
        generate_parameters()
        {
        cat <<EOF
          {
            "params" : {
              "branch": "$BRANCH"
            }
          }
        EOF
        }
        WORKFLOW_ID=$(
            curl -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.TOWER_ACCESS_KEY }}" \
            https://api.tower.nf/actions/${TOWER_ACTION_ID}/launch?workspaceId=${TOWER_WORKSPACE_ID} \
            --data "$(generate_parameters)" | \
            tee /dev/stderr | \
            sed 's/.*"\([a-zA-Z0-9]*\)".*/\1/'
        )
        echo "Benchmark running at ${TOWER_WATCH_URL}/${WORKFLOW_ID}" >> $GITHUB_STEP_SUMMARY
