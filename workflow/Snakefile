import os
import snakemake_tools as tools
import sys

rule docker:
    input: tools.update_images
    params:
        version = tools.VERSION_FILE
    shell: "openproblems-cli --version > {params.version}"

rule docker_push:
    input: tools.push_images
    params:
        version = tools.VERSION_FILE
    shell: "openproblems-cli --version > {params.version}"

rule docker_build:
    input: tools.build_images
    params:
        version = tools.VERSION_FILE
    shell: "openproblems-cli --version > {params.version}"

rule docker_pull:
    input: tools.pull_images

rule docker_refresh:
    input: tools.refresh_images

rule refresh_docker_image:
    input:
        dockerfile = "{}/{{image}}/refresh.Dockerfile".format(tools.IMAGES_DIR),
        requirements = tools.docker_refresh_requirements,
    output:
        temp(touch("{}/{{image}}/.docker_refresh".format(tools.IMAGES_DIR)))
    params:
        sourcedir = os.path.dirname(tools.SCRIPTS_DIR),
        user = "singlecellopenproblems",
        label = "github_actions" if "GITHUB_ACTIONS" in os.environ else "local"
    shell:
        "docker build --label bio.openproblems.build={params.label} -f {input.dockerfile} -t {params.user}/{wildcards.image} .."

rule refresh_dockerfile:
    input:
        docker_pull = "{}/{{image}}/.docker_pull".format(tools.IMAGES_DIR),
    output:
        temp("{}/{{image}}/refresh.Dockerfile".format(tools.IMAGES_DIR))
    shell:
        r"""echo '
FROM singlecellopenproblems/{wildcards.image}:latest AS base
# Copy requirements files
COPY ./docker/{wildcards.image}/* ./
COPY ./scripts/install_renv.R ./

# Install Python packages
RUN if [ -f requirements.txt ]; then sudo pip install --no-cache-dir -U -r requirements.txt; fi

# Install R packages
RUN if [ -f r_requirements.txt ]; then sudo R -e "source(\"install_renv.R\"); install_renv(\"r_requirements.txt\")"; fi

# Install single-cell open problems
COPY . /usr/src/singlecellopenproblems
RUN cd /usr/src/singlecellopenproblems && sudo git clean -fxdq
RUN sudo pip install --no-cache-dir --editable /usr/src/singlecellopenproblems
' > {output}"""

ruleorder: update_docker_image > build_docker_image

rule update_docker_image:
    input:
        tools.docker_update_requirements
    output:
        temp("{}/{{image}}/.docker_update".format(tools.IMAGES_DIR))
		shell:
        "touch {output}"

rule build_docker_image:
    input:
        dockerfile = "{}/{{image}}/Dockerfile".format(tools.IMAGES_DIR),
        requirements = tools.docker_build_requirements,
    output:
        docker_build = temp(touch("{}/{{image}}/.docker_build".format(tools.IMAGES_DIR))),
        docker_update = temp(touch("{}/{{image}}/.docker_update".format(tools.IMAGES_DIR))),
    params:
        sourcedir = os.path.dirname(tools.SCRIPTS_DIR),
        user = "singlecellopenproblems",
        label = tools.build_type
    shell:
        "docker build --label bio.openproblems.build={params.label} -f {input.dockerfile} -t {params.user}/{wildcards.image} .."

rule password_docker:
    output:
        filename = temp(".docker_password")
    run:
        with open(output.filename, 'w') as handle:
            handle.write(tools.DOCKER_PASSWORD)

rule login_docker:
    input:
        ".docker_password"
    output:
        temp(touch(".docker_login"))
    shell:
        "docker login --username=singlecellopenproblems --password=$(cat {input})"

rule push_docker_image:
    input:
        build = "{}/{{image}}/.docker_update".format(tools.IMAGES_DIR),
        login = ".docker_login",
    output:
        temp(touch("{}/{{image}}/.docker_push".format(tools.IMAGES_DIR)))
    shell:
        "docker push --quiet singlecellopenproblems/{wildcards.image}"

rule pull_docker_image:
    output:
        temp(touch("{}/{{image}}/.docker_pull".format(tools.IMAGES_DIR)))
    shell:
        "DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect singlecellopenproblems/{wildcards.image} > /dev/null && \
        docker pull --quiet singlecellopenproblems/{wildcards.image} || true"
