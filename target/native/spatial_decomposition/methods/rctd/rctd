#!/usr/bin/env bash

# rctd main_build
# 
# This wrapper script is auto-generated by viash 0.8.6 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="rctd"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "rctd main_build"
  echo ""
  echo "Arguments:"
  echo "    --input_single_cell"
  echo "        type: file, required parameter, file must exist"
  echo "        example:"
  echo "resources_test/spatial_decomposition/cxg_mouse_pancreas_atlas/single_cell_ref.h5ad"
  echo ""
  echo "    --input_spatial_masked"
  echo "        type: file, required parameter, file must exist"
  echo "        example:"
  echo "resources_test/spatial_decomposition/cxg_mouse_pancreas_atlas/spatial_masked.h5ad"
  echo ""
  echo "    --output"
  echo "        type: file, required parameter, output, file must exist"
  echo "        example:"
  echo "resources_test/spatial_decomposition/cxg_mouse_pancreas_atlas/output.h5ad"
  echo ""
  echo "    --fc_cutoff"
  echo "        type: double"
  echo "        default: 0.5"
  echo "        Minimum log-fold-change (across cell types) for genes to be included in"
  echo "        the platform effect normalization step."
  echo ""
  echo "    --fc_cutoff_reg"
  echo "        type: double"
  echo "        default: 0.75"
  echo "        Minimum log-fold-change (across cell types) for genes to be included in"
  echo "        the RCTD step."
}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "rctd main_build"
            exit
            ;;
        --input_single_cell)
            [ -n "$VIASH_PAR_INPUT_SINGLE_CELL" ] && ViashError Bad arguments for option \'--input_single_cell\': \'$VIASH_PAR_INPUT_SINGLE_CELL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_SINGLE_CELL="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input_single_cell. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input_single_cell=*)
            [ -n "$VIASH_PAR_INPUT_SINGLE_CELL" ] && ViashError Bad arguments for option \'--input_single_cell=*\': \'$VIASH_PAR_INPUT_SINGLE_CELL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_SINGLE_CELL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_spatial_masked)
            [ -n "$VIASH_PAR_INPUT_SPATIAL_MASKED" ] && ViashError Bad arguments for option \'--input_spatial_masked\': \'$VIASH_PAR_INPUT_SPATIAL_MASKED\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_SPATIAL_MASKED="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input_spatial_masked. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input_spatial_masked=*)
            [ -n "$VIASH_PAR_INPUT_SPATIAL_MASKED" ] && ViashError Bad arguments for option \'--input_spatial_masked=*\': \'$VIASH_PAR_INPUT_SPATIAL_MASKED\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_SPATIAL_MASKED=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --fc_cutoff)
            [ -n "$VIASH_PAR_FC_CUTOFF" ] && ViashError Bad arguments for option \'--fc_cutoff\': \'$VIASH_PAR_FC_CUTOFF\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FC_CUTOFF="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --fc_cutoff. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --fc_cutoff=*)
            [ -n "$VIASH_PAR_FC_CUTOFF" ] && ViashError Bad arguments for option \'--fc_cutoff=*\': \'$VIASH_PAR_FC_CUTOFF\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FC_CUTOFF=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --fc_cutoff_reg)
            [ -n "$VIASH_PAR_FC_CUTOFF_REG" ] && ViashError Bad arguments for option \'--fc_cutoff_reg\': \'$VIASH_PAR_FC_CUTOFF_REG\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FC_CUTOFF_REG="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --fc_cutoff_reg. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --fc_cutoff_reg=*)
            [ -n "$VIASH_PAR_FC_CUTOFF_REG" ] && ViashError Bad arguments for option \'--fc_cutoff_reg=*\': \'$VIASH_PAR_FC_CUTOFF_REG\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FC_CUTOFF_REG=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_INPUT_SINGLE_CELL+x} ]; then
  ViashError '--input_single_cell' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_INPUT_SPATIAL_MASKED+x} ]; then
  ViashError '--input_spatial_masked' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OUTPUT+x} ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_FC_CUTOFF+x} ]; then
  VIASH_PAR_FC_CUTOFF="0.5"
fi
if [ -z ${VIASH_PAR_FC_CUTOFF_REG+x} ]; then
  VIASH_PAR_FC_CUTOFF_REG="0.75"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_INPUT_SINGLE_CELL" ] && [ ! -e "$VIASH_PAR_INPUT_SINGLE_CELL" ]; then
  ViashError "Input file '$VIASH_PAR_INPUT_SINGLE_CELL' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_INPUT_SPATIAL_MASKED" ] && [ ! -e "$VIASH_PAR_INPUT_SPATIAL_MASKED" ]; then
  ViashError "Input file '$VIASH_PAR_INPUT_SPATIAL_MASKED' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_FC_CUTOFF" ]]; then
  if ! [[ "$VIASH_PAR_FC_CUTOFF" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--fc_cutoff' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_FC_CUTOFF_REG" ]]; then
  if ! [[ "$VIASH_PAR_FC_CUTOFF_REG" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--fc_cutoff_reg' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT")"
fi


# set dependency paths


ViashDebug "Running command: bash"
cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-rctd-XXXXXX").R
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
library(anndata)
library(spacexr)
library(Matrix)

## VIASH START
# The following code has been auto-generated by Viash.
# treat warnings as errors
.viash_orig_warn <- options(warn = 2)

par <- list(
  "input_single_cell" = $( if [ ! -z ${VIASH_PAR_INPUT_SINGLE_CELL+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_INPUT_SINGLE_CELL" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "input_spatial_masked" = $( if [ ! -z ${VIASH_PAR_INPUT_SPATIAL_MASKED+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_INPUT_SPATIAL_MASKED" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_OUTPUT" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "fc_cutoff" = $( if [ ! -z ${VIASH_PAR_FC_CUTOFF+x} ]; then echo -n "as.numeric('"; echo -n "$VIASH_PAR_FC_CUTOFF" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "fc_cutoff_reg" = $( if [ ! -z ${VIASH_PAR_FC_CUTOFF_REG+x} ]; then echo -n "as.numeric('"; echo -n "$VIASH_PAR_FC_CUTOFF_REG" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi )
)
meta <- list(
  "functionality_name" = $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo -n "'"; echo -n "$VIASH_META_FUNCTIONALITY_NAME" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "resources_dir" = $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo -n "'"; echo -n "$VIASH_META_RESOURCES_DIR" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "executable" = $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo -n "'"; echo -n "$VIASH_META_EXECUTABLE" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "config" = $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo -n "'"; echo -n "$VIASH_META_CONFIG" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "temp_dir" = $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo -n "'"; echo -n "$VIASH_META_TEMP_DIR" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "cpus" = $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_META_CPUS" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_b" = $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_B" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_kb" = $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_KB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_mb" = $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_MB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_gb" = $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_GB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_tb" = $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_TB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_pb" = $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_PB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi )
)
dep <- list(
  
)


# restore original warn setting
options(.viash_orig_warn)
rm(.viash_orig_warn)

## VIASH END

cat("Reading input files\\n")
input_single_cell <- anndata::read_h5ad(par\$input_single_cell)
input_spatial <- anndata::read_h5ad(par\$input_spatial)

# set spatial coordinates for the single cell data
coordinates <- matrix(1, dim(input_single_cell)[1], 2)
rownames(coordinates) <- rownames(input_single_cell)
input_single_cell\$obsm <- list(coordinates = coordinates)

# remove rare cell types to prevent RCTD error
# celltype_counts <- table(input_single_cell\$obs\$cell_type)
# input_single_cell <- input_single_cell[input_single_cell\$obs\$cell_type %in% names(as.table(celltype_counts[celltype_counts > 25]))]

# get single cell reference counts
sc_counts <- t(input_single_cell\$layers['counts'])
# get single cell reference labels
sc_cell_types <- factor(input_single_cell\$obs\$cell_type)
names(sc_cell_types) <- rownames(input_single_cell)
# construct reference object (specific for RCTD)
reference <- Reference(sc_counts, sc_cell_types)

# get spatial data counts
sp_counts <- t(input_spatial\$layers['counts'])
# get spatial data coordinates
sp_coords <- as.data.frame(input_spatial\$obsm['coordinates'])
colnames(sp_coords) <- c("x", "y")
rownames(sp_coords) <- rownames(input_spatial)
# create spatial object to use in RCTD
puck <- SpatialRNA(sp_coords, sp_counts)

# create RCTD object from reference and spatialRNA objects
if (!is.null(meta\$cpus)) {
max_cores <- meta\$cpus
} else {
max_cores <- 1
}
rctd <- create.RCTD(
  puck,
  reference,
  max_cores = max_cores,
  fc_cutoff = par\$fc_cutoff,
  fc_cutoff_reg = par\$fc_cutoff_reg,
  test_mode = FALSE,
  UMI_min_sigma = 100,
  CELL_MIN_INSTANCE = 1
)

# run analysis and get results
rctd <- run.RCTD(rctd)
results <- rctd@results
cell_type_names <- rctd@cell_type_info\$info[[2]]

# extract proportions and normalize them (to sum to one)
norm_weights <- sweep(results\$weights, 1, rowSums(results\$weights), "/")
norm_weights <- as.matrix(norm_weights)
coordinates <- as.matrix(sp_coords)

cat("Write output AnnData to file\\n")
output <- anndata::AnnData(
  shape = input_spatial\$shape, 
  obs = input_spatial\$obs,
  var = input_spatial\$var,
  uns = list(
    cell_type_names = input_spatial\$uns['cell_type_names'],
    dataset_id = input_spatial\$uns[["dataset_id"]],
    method_id = meta[["functionality_name"]]
  ),
  obsm = list(
    coordinates = coordinates,
    proportions_pred = norm_weights
  ),
  layers = list(
    counts = input_spatial\$layers['counts']
  )
)
output\$write_h5ad(par[["output"]], compression = "gzip")
VIASHMAIN
Rscript "\$tempscript" &
wait "\$!"

VIASHEOF


# check whether required files exist
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -e "$VIASH_PAR_OUTPUT" ]; then
  ViashError "Output file '$VIASH_PAR_OUTPUT' does not exist."
  exit 1
fi


exit 0
