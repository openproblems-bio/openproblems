#!/usr/bin/env bash

# dataset_simulator main_build
# 
# This wrapper script is auto-generated by viash 0.8.6 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="dataset_simulator"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "dataset_simulator main_build"
  echo ""
  echo "Arguments:"
  echo "    --input"
  echo "        type: file, file must exist"
  echo "        example: resources_test/common/cxg_mouse_pancreas_atlas/dataset.h5ad"
  echo "        Single-cell reference dataset"
  echo ""
  echo "    --alpha"
  echo "        type: double"
  echo "        default: 1.0"
  echo "        Alpha value to use for generating synthetic dataset"
  echo ""
  echo "    --n_obs"
  echo "        type: integer"
  echo "        default: 100"
  echo "        Number of spatial observations to generate. Default value is 100."
  echo ""
  echo "    --cell_lb"
  echo "        type: integer"
  echo "        default: 10"
  echo "        Lower bound for number of cells at each spot. Default value is 10."
  echo ""
  echo "    --cell_ub"
  echo "        type: integer"
  echo "        default: 30"
  echo "        Upper bound for number of cells at each spot. Default value is 30."
  echo ""
  echo "    --umi_lb"
  echo "        type: integer"
  echo "        default: 1000"
  echo "        Lower bound for number of cells at each spot. Default value is 1000."
  echo ""
  echo "    --umi_ub"
  echo "        type: integer"
  echo "        default: 5000"
  echo "        Upper bound for number of UMIs at each spot. Default value is 5000."
  echo ""
  echo "    --simulated_data"
  echo "        type: file, output, file must exist"
  echo "        example: dataset_simulated.h5ad"
  echo "        Simulated dataset"
}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "dataset_simulator main_build"
            exit
            ;;
        --input)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input=*)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input=*\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --alpha)
            [ -n "$VIASH_PAR_ALPHA" ] && ViashError Bad arguments for option \'--alpha\': \'$VIASH_PAR_ALPHA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ALPHA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --alpha. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --alpha=*)
            [ -n "$VIASH_PAR_ALPHA" ] && ViashError Bad arguments for option \'--alpha=*\': \'$VIASH_PAR_ALPHA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ALPHA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_obs)
            [ -n "$VIASH_PAR_N_OBS" ] && ViashError Bad arguments for option \'--n_obs\': \'$VIASH_PAR_N_OBS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_N_OBS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_obs. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --n_obs=*)
            [ -n "$VIASH_PAR_N_OBS" ] && ViashError Bad arguments for option \'--n_obs=*\': \'$VIASH_PAR_N_OBS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_N_OBS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --cell_lb)
            [ -n "$VIASH_PAR_CELL_LB" ] && ViashError Bad arguments for option \'--cell_lb\': \'$VIASH_PAR_CELL_LB\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_CELL_LB="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --cell_lb. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --cell_lb=*)
            [ -n "$VIASH_PAR_CELL_LB" ] && ViashError Bad arguments for option \'--cell_lb=*\': \'$VIASH_PAR_CELL_LB\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_CELL_LB=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --cell_ub)
            [ -n "$VIASH_PAR_CELL_UB" ] && ViashError Bad arguments for option \'--cell_ub\': \'$VIASH_PAR_CELL_UB\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_CELL_UB="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --cell_ub. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --cell_ub=*)
            [ -n "$VIASH_PAR_CELL_UB" ] && ViashError Bad arguments for option \'--cell_ub=*\': \'$VIASH_PAR_CELL_UB\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_CELL_UB=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --umi_lb)
            [ -n "$VIASH_PAR_UMI_LB" ] && ViashError Bad arguments for option \'--umi_lb\': \'$VIASH_PAR_UMI_LB\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_UMI_LB="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --umi_lb. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --umi_lb=*)
            [ -n "$VIASH_PAR_UMI_LB" ] && ViashError Bad arguments for option \'--umi_lb=*\': \'$VIASH_PAR_UMI_LB\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_UMI_LB=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --umi_ub)
            [ -n "$VIASH_PAR_UMI_UB" ] && ViashError Bad arguments for option \'--umi_ub\': \'$VIASH_PAR_UMI_UB\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_UMI_UB="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --umi_ub. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --umi_ub=*)
            [ -n "$VIASH_PAR_UMI_UB" ] && ViashError Bad arguments for option \'--umi_ub=*\': \'$VIASH_PAR_UMI_UB\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_UMI_UB=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --simulated_data)
            [ -n "$VIASH_PAR_SIMULATED_DATA" ] && ViashError Bad arguments for option \'--simulated_data\': \'$VIASH_PAR_SIMULATED_DATA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SIMULATED_DATA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --simulated_data. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --simulated_data=*)
            [ -n "$VIASH_PAR_SIMULATED_DATA" ] && ViashError Bad arguments for option \'--simulated_data=*\': \'$VIASH_PAR_SIMULATED_DATA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SIMULATED_DATA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_ALPHA+x} ]; then
  VIASH_PAR_ALPHA="1.0"
fi
if [ -z ${VIASH_PAR_N_OBS+x} ]; then
  VIASH_PAR_N_OBS="100"
fi
if [ -z ${VIASH_PAR_CELL_LB+x} ]; then
  VIASH_PAR_CELL_LB="10"
fi
if [ -z ${VIASH_PAR_CELL_UB+x} ]; then
  VIASH_PAR_CELL_UB="30"
fi
if [ -z ${VIASH_PAR_UMI_LB+x} ]; then
  VIASH_PAR_UMI_LB="1000"
fi
if [ -z ${VIASH_PAR_UMI_UB+x} ]; then
  VIASH_PAR_UMI_UB="5000"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_INPUT" ] && [ ! -e "$VIASH_PAR_INPUT" ]; then
  ViashError "Input file '$VIASH_PAR_INPUT' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_ALPHA" ]]; then
  if ! [[ "$VIASH_PAR_ALPHA" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--alpha' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_N_OBS" ]]; then
  if ! [[ "$VIASH_PAR_N_OBS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--n_obs' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_CELL_LB" ]]; then
  if ! [[ "$VIASH_PAR_CELL_LB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--cell_lb' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_CELL_UB" ]]; then
  if ! [[ "$VIASH_PAR_CELL_UB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--cell_ub' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_UMI_LB" ]]; then
  if ! [[ "$VIASH_PAR_UMI_LB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--umi_lb' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_UMI_UB" ]]; then
  if ! [[ "$VIASH_PAR_UMI_UB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--umi_ub' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_SIMULATED_DATA" ] && [ ! -d "$(dirname "$VIASH_PAR_SIMULATED_DATA")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_SIMULATED_DATA")"
fi


# set dependency paths


ViashDebug "Running command: bash"
cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-dataset_simulator-XXXXXX").py
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
from typing import Sequence
from typing import Union

import anndata as ad
import numpy as np
import scanpy as sc

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "r'${VIASH_PAR_INPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'alpha': $( if [ ! -z ${VIASH_PAR_ALPHA+x} ]; then echo "float(r'${VIASH_PAR_ALPHA//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'n_obs': $( if [ ! -z ${VIASH_PAR_N_OBS+x} ]; then echo "int(r'${VIASH_PAR_N_OBS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'cell_lb': $( if [ ! -z ${VIASH_PAR_CELL_LB+x} ]; then echo "int(r'${VIASH_PAR_CELL_LB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'cell_ub': $( if [ ! -z ${VIASH_PAR_CELL_UB+x} ]; then echo "int(r'${VIASH_PAR_CELL_UB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'umi_lb': $( if [ ! -z ${VIASH_PAR_UMI_LB+x} ]; then echo "int(r'${VIASH_PAR_UMI_LB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'umi_ub': $( if [ ! -z ${VIASH_PAR_UMI_UB+x} ]; then echo "int(r'${VIASH_PAR_UMI_UB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'simulated_data': $( if [ ! -z ${VIASH_PAR_SIMULATED_DATA+x} ]; then echo "r'${VIASH_PAR_SIMULATED_DATA//\'/\'\"\'\"r\'}'"; else echo None; fi )
}
meta = {
  'functionality_name': $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "r'${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'resources_dir': $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "r'${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'executable': $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "r'${VIASH_META_EXECUTABLE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'config': $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo "r'${VIASH_META_CONFIG//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'temp_dir': $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "r'${VIASH_META_TEMP_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cpus': $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "int(r'${VIASH_META_CPUS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_b': $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "int(r'${VIASH_META_MEMORY_B//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kb': $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mb': $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gb': $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tb': $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pb': $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PB//\'/\'\"\'\"r\'}')"; else echo None; fi )
}
dep = {
  
}

## VIASH END

CELLTYPE_MIN_CELLS = 25

# Reading input dataset
adata = ad.read_h5ad(par['input'])


def generate_synthetic_dataset(
    adata: ad.AnnData,
    alpha: Union[float, Sequence] = 1.0,
    n_obs: int = 1000,
    cell_lb: int = 10,
    cell_ub: int = 30,
    umi_lb: int = 1000,
    umi_ub: int = 5000,
) -> ad.AnnData:
    """Create cell-aggregate samples for ground-truth spatial decomposition task.

    Parameters
    ----------
    adata: AnnData
        Anndata object.
    type_column: str
        name of column in \`adata.obs\` where cell type labels are given
    alpha: Union[float,Sequence]
        alpha value in dirichlet distribution. If single number then all alpha_i values
        will be set to this value. Default value is 1.
    n_obs: int
        number of spatial observations to generate. Default value is 1000.
    cell_lb: int
        lower bound for number of cells at each spot. Default value is 10.
    cell_ub: int
        upper bound for number of cells at each spot. Default value is 30.
    umi_lb: int
        lower bound for number of UMIs at each spot. Default value is 10.
    umi_ub: int
        upper bound for number of UMIs at each spot. Default value is 30.

    Returns
    -------
    AnnData with:
        - \`adata_merged.X\`: simulated counts (aggregate of sc dataset).
        - \`adata_merged.obsm["proportions_true"]\`: true proportion values.
        - \`adata_merged.obsm["coordinates"]\`: coordinates of each spot.
        - \`adata_merged.obsm["n_cells"]\`: number of cells from each type at every location.

    """
    
    # remove rare celltypes
    adata = filter_celltypes(adata)

    # set random generator seed
    rng = np.random.default_rng(42)

    # get single cell expression data
    counts = adata.layers['counts']
    # get cell annotations/labels
    labels = adata.obs['cell_type'].values
    # get unique labels
    uni_labs = np.unique(labels)
    # count number of labels
    n_labs = len(uni_labs)
    # get number of genes
    n_genes = adata.shape[1]

    # create dict with indices of each label
    label_indices = dict()
    for label in uni_labs:
        label_indices[label] = np.where(labels == label)[0]

    # adjust alpha to vector if single scalar
    if not hasattr(alpha, "__len__"):
        alpha = np.ones(n_labs) * alpha
    else:
        assert len(alpha) == n_labs, "alpha must be same size as number of cell types"

    # generate probability of sampling label at each spot
    sp_props = rng.dirichlet(alpha, size=n_obs)
    # number of cells present at each spot
    n_cells = rng.integers(cell_lb, cell_ub, size=n_obs)

    # initialize spatial expression matrix
    sp_x = np.zeros((n_obs, n_genes))
    # initialize spatial proportion matrix
    sp_p = np.zeros((n_obs, n_labs))
    # initialize spatial cell number matrix
    sp_c = np.zeros(sp_p.shape)

    # generate expression vector for each spot (s)
    for s in range(n_obs):
        # number of cells from each label at s
        raw_s = rng.multinomial(n_cells[s], pvals=sp_props[s, :])
        # store number of cells from each type at s
        sp_c[s, :] = raw_s
        # compute proportion of each type at s
        prop_s = raw_s / n_cells[s]
        # store proportion of each type at s
        sp_p[s, :] = prop_s

        # initialize transcript pool at s
        pool_s = np.zeros(n_genes)

        # add molecules to transcript pool
        for lab, n in enumerate(raw_s):
            # get indices of cells from which transcripts should be added
            idx_sl = rng.choice(label_indices[uni_labs[lab]], size=n)
            # add molecules to pool
            pool_s += counts[idx_sl, :].sum(axis=0).A.flatten()

        # number of UMIs at spot s
        n_umis = rng.integers(umi_lb, umi_ub)
        # compute probability of sampling UMI from gene
        prob_pool_s = pool_s / pool_s.sum()

        # sample transcripts from pool
        sp_x[s, :] = np.random.multinomial(n=n_umis, pvals=prob_pool_s)

    obs_names = ["spatial_{}".format(x) for x in range(n_obs)]
    adata_spatial = ad.AnnData(
        sp_x,
        obs=dict(obs_names=obs_names),
        var=dict(var_names=adata.var_names),
    )

    # fake coordinates
    adata_spatial.obsm["coordinates"] = rng.random((adata_spatial.shape[0], 2))
    adata_spatial.obsm["proportions_true"] = sp_p
    adata_spatial.obs["n_cells"] = n_cells
    adata_spatial.obsm["n_cells"] = sp_c
    
    adata_merged = ad.concat(
        {"sc": adata, "sp": adata_spatial}, 
        label="modality",
        join="outer", 
        index_unique=None, 
        merge="unique", 
        uns_merge="unique"
    )
    adata_merged.X[adata_merged.X == np.inf] = adata_merged.X.max()  # remove inf
    adata_merged.layers["counts"] = adata_merged.X
    adata_merged.uns["cell_type_names"] = uni_labs
    return adata_merged


def filter_celltypes(adata, min_cells=CELLTYPE_MIN_CELLS):
    """Filter rare celltypes from an AnnData"""
    celltype_counts = adata.obs["cell_type"].value_counts() >= min_cells
    keep_cells = np.isin(adata.obs["cell_type"], celltype_counts.index[celltype_counts])
    return adata[adata.obs.index[keep_cells]].copy()


def filter_genes_cells(adata):
    """Remove empty cells and genes."""
    if "var_names_all" not in adata.uns:
        # fill in original var names before filtering
        adata.uns["var_names_all"] = adata.var.index.to_numpy()
    sc.pp.filter_genes(adata, min_cells=1)
    sc.pp.filter_cells(adata, min_counts=2)


adata.X = adata.layers["counts"]
sc.pp.filter_genes(adata, min_counts=10)
adata_merged = generate_synthetic_dataset(adata, 
    alpha=par['alpha'], 
    n_obs=par['n_obs'], 
    cell_lb=par['cell_lb'], 
    cell_ub=par['cell_ub'], 
    umi_lb=par['umi_lb'], 
    umi_ub=par['umi_ub'] 
)
adata_merged.uns["spatial_data_summary"] = f"Dirichlet alpha={par['alpha']}"
filter_genes_cells(adata_merged)
adata_merged.X = None

# Convert non-string objects to categoricals to avoid
# TypeError: Can't implicitly convert non-string objects to strings
# In this case, the error is raised when there are NA values in .obs columns with dtype object (boolean).
# The resulting anndata object cannot be written to a file.
# This conversion is handled in later versions of anndata (0.10)
for col in adata_merged.obs:
    if adata_merged.obs[col].dtype == 'object':
        adata_merged.obs[col] = adata_merged.obs[col].astype('category')

print("Writing output to file")
adata_merged.write_h5ad(par["simulated_data"])
VIASHMAIN
python -B "\$tempscript" &
wait "\$!"

VIASHEOF


# check whether required files exist
if [ ! -z "$VIASH_PAR_SIMULATED_DATA" ] && [ ! -e "$VIASH_PAR_SIMULATED_DATA" ]; then
  ViashError "Output file '$VIASH_PAR_SIMULATED_DATA' does not exist."
  exit 1
fi


exit 0
