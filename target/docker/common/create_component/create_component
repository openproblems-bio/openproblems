#!/usr/bin/env bash

# create_component build_main
# 
# This wrapper script is auto-generated by viash 0.8.6 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="create_component"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "create_component build_main"
  echo ""
  echo "Create a component Viash component."
  echo ""
  echo "Usage:"
  echo "\`\`\`"
  echo "bin/create_component --task denoising --type method --language r --name foo"
  echo "bin/create_component --task denoising --type metric --language python --name bar"
  echo "\`\`\`"
  echo ""
  echo "Arguments:"
  echo "    --task"
  echo "        type: string"
  echo "        example: denoising"
  echo "        Which task the component will be added to."
  echo ""
  echo "    --type"
  echo "        type: string"
  echo "        example: metric"
  echo "        The type of component to create. Typically must be one of 'method',"
  echo "        'control_method' or 'metric'."
  echo ""
  echo "    --language"
  echo "        type: string"
  echo "        default: python"
  echo "        choices: [ python, r ]"
  echo "        Which scripting language to use. Options are 'python', 'r'."
  echo ""
  echo "    --name"
  echo "        type: string"
  echo "        example: new_comp"
  echo "        Name of the new method, formatted in snake case."
  echo ""
  echo "    --output"
  echo "        type: file, output, file must exist"
  echo "        default:"
  echo "src/tasks/\${VIASH_PAR_TASK}/\${VIASH_PAR_TYPE}s/\${VIASH_PAR_NAME}"
  echo "        Path to the component directory. Suggested location is"
  echo "        \`src/<TASK>/<TYPE>s/<NAME>\`."
  echo ""
  echo "    --api_file"
  echo "        type: file"
  echo "        default: src/tasks/\${VIASH_PAR_TASK}/api/comp_\${VIASH_PAR_TYPE}.yaml"
  echo "        Which API file to use. Defaults to \`src/<TASK>/api/comp_<TYPE>.yaml\`."
  echo "        In tasks with different subtypes of method, this location might not"
  echo "        exist and you might need"
  echo "        to manually specify a different API file to inherit from."
  echo ""
  echo "    --viash_yaml"
  echo "        type: file, file must exist"
  echo "        default: _viash.yaml"
  echo "        Path to the project config file. Needed for knowing the relative"
  echo "        location of a file to the project root."
}

######## Helper functions for setting up Docker images for viash ########
# expects: ViashDockerBuild

# ViashDockerInstallationCheck: check whether Docker is installed correctly
#
# examples:
#   ViashDockerInstallationCheck
function ViashDockerInstallationCheck {
  ViashDebug "Checking whether Docker is installed"
  if [ ! command -v docker &> /dev/null ]; then
    ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
    exit 1
  fi

  ViashDebug "Checking whether the Docker daemon is running"
  save=$-; set +e
  docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
    ViashCritical "- Try running 'dockerd' in the command line"
    ViashCritical "- See https://docs.docker.com/config/daemon/"
    exit 1
  fi
}

# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  ViashNotice "Checking if Docker image is available at '$1'"
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker pull $1 && return 0 || return 1
  else
    save=$-; set +e
    docker pull $1 2> /dev/null > /dev/null
    out=$?
    [[ $save =~ e ]] && set -e
    if [ $out -ne 0 ]; then
      ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
    fi
    return $out
  fi
}

# ViashDockerPush: push a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPush python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPush sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPush {
  ViashNotice "Pushing image to '$1'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker push $1
    out=$?
  else
    docker push $1 2> /dev/null > /dev/null
    out=$?
  fi
  [[ $save =~ e ]] && set -e
  if [ $out -eq 0 ]; then
    ViashNotice "Container '$VSHD_ID' push succeeded."
  else
    ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
  fi
  return $out
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  save=$-; set +e
  ViashDockerPull $1
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $2                  : docker setup strategy, see DockerSetupStrategy.scala
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerSetup mynewcomponent alwaysbuild
function ViashDockerSetup {
  VSHD_ID="$1"
  VSHD_STRAT="$2"
  if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
    ViashDockerBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
    ViashDockerPull $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
    ViashDockerBuild $VSHD_ID
  elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
    save=$-; set +e
    ViashDockerLocalTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashInfo "Image $VSHD_ID already exists"
    elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
      ViashDockerBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
      ViashDockerPull $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID
    else
      ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
      exit 1
    fi
  elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
    ViashDockerPush "$VSHD_ID"
  elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
    save=$-; set +e
    ViashDockerRemoteTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashNotice "Container '$VSHD_ID' exists, doing nothing."
    else
      ViashNotice "Container '$VSHD_ID' does not yet exist."
      ViashDockerPush "$VSHD_ID"
    fi
  elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
    ViashNotice "Skipping setup."
  else
    ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
    exit 1
  fi
}

# ViashDockerCheckCommands: Check whether a docker container has the required commands
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $@                  : commands to verify being present
# examples:
#   ViashDockerCheckCommands bash:4.0 bash ps foo
function ViashDockerCheckCommands {
  tag=$1
  shift 1
  commands="$@"
  save=$-; set +e
  missing=$(docker run --rm --entrypoint=sh $tag -c "for command in $commands; do command -v \$command >/dev/null 2>&1; if [ \$? -ne 0 ]; then echo \$command; exit 1; fi; done")
  outCheck=$?
  [[ $save =~ e ]] && set -e
  if [ $outCheck -ne 0 ]; then
  	ViashError "Docker container '$tag' does not contain command '$missing'."
  	exit 1
  fi
}


######## End of helper functions for setting up Docker images for viash ########

# ViashDockerFile: print the dockerfile to stdout
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  cat << 'VIASHDOCKER'
FROM python:3.10-slim

ENTRYPOINT []

 
RUN pip install --upgrade pip && \
  pip install --upgrade --no-cache-dir "ruamel.yaml"

LABEL org.opencontainers.image.description="Companion container for running component common create_component"
LABEL org.opencontainers.image.created="2024-10-02T11:51:26Z"
LABEL org.opencontainers.image.source="https://github.com/openproblems-bio/openproblems"
LABEL org.opencontainers.image.revision="a01361f4ce2cac290991756717f49cbe85815b85"
LABEL org.opencontainers.image.version="build_main"

VIASHDOCKER
}

# ViashDockerBuild: build a docker container
# $1              : image identifier with format `[registry/]image[:tag]`
# exit code $?    : whether or not the image was built
function ViashDockerBuild {
  # create temporary directory to store dockerfile & optional resources in
  tmpdir=$(mktemp -d "$VIASH_META_TEMP_DIR/dockerbuild-create_component-XXXXXX")
  dockerfile="$tmpdir/Dockerfile"
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile > $dockerfile

  # Build the container
  ViashNotice "Building container '$1' with Dockerfile"
  ViashInfo "Running 'docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile
  else
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile &> $tmpdir/docker_build.log
  fi
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashError "Error occurred while building container '$1'"
    if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
      ViashError "Transcript: --------------------------------"
      cat "$tmpdir/docker_build.log"
      ViashError "End of transcript --------------------------"
    fi
    exit 1
  fi
  ViashDockerCheckCommands "$1" 'bash'
}

# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashAutodetectMount: auto configuring docker mounts from parameters
# $1                  : The parameter value
# returns             : New parameter
# $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
# examples:
#   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashAutodetectMountArg /path/to/bar   # returns '--volume="/path/to:/viash_automount/path/to"'
function ViashAutodetectMount {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  if [ -z "$base_name" ]; then
    echo "$mount_target"
  else
    echo "$mount_target/$base_name"
  fi
}
function ViashAutodetectMountArg {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  ViashDebug "ViashAutodetectMountArg $1 -> $mount_source -> $mount_target"
  echo "--volume=\"$mount_source:$mount_target\""
}
function ViashStripAutomount {
  abs_path=$(ViashAbsolutePath "$1")
  echo "${abs_path#/viash_automount}"
}
# ViashExtractFlags: Retain leading flag
# $1     : string with a possible leading flag
# return : leading flag
# examples:
#   ViashExtractFlags --foo=bar  # returns --foo
function ViashExtractFlags {
  echo $1 | sed 's/=.*//'
}
# initialise variables
VIASH_EXTRA_MOUNTS=()

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "create_component build_main"
            exit
            ;;
        --task)
            [ -n "$VIASH_PAR_TASK" ] && ViashError Bad arguments for option \'--task\': \'$VIASH_PAR_TASK\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TASK="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --task. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --task=*)
            [ -n "$VIASH_PAR_TASK" ] && ViashError Bad arguments for option \'--task=*\': \'$VIASH_PAR_TASK\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TASK=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --type)
            [ -n "$VIASH_PAR_TYPE" ] && ViashError Bad arguments for option \'--type\': \'$VIASH_PAR_TYPE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TYPE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --type. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --type=*)
            [ -n "$VIASH_PAR_TYPE" ] && ViashError Bad arguments for option \'--type=*\': \'$VIASH_PAR_TYPE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TYPE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --language)
            [ -n "$VIASH_PAR_LANGUAGE" ] && ViashError Bad arguments for option \'--language\': \'$VIASH_PAR_LANGUAGE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LANGUAGE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --language. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --language=*)
            [ -n "$VIASH_PAR_LANGUAGE" ] && ViashError Bad arguments for option \'--language=*\': \'$VIASH_PAR_LANGUAGE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LANGUAGE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --name)
            [ -n "$VIASH_PAR_NAME" ] && ViashError Bad arguments for option \'--name\': \'$VIASH_PAR_NAME\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NAME="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --name. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --name=*)
            [ -n "$VIASH_PAR_NAME" ] && ViashError Bad arguments for option \'--name=*\': \'$VIASH_PAR_NAME\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NAME=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --api_file)
            [ -n "$VIASH_PAR_API_FILE" ] && ViashError Bad arguments for option \'--api_file\': \'$VIASH_PAR_API_FILE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_API_FILE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --api_file. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --api_file=*)
            [ -n "$VIASH_PAR_API_FILE" ] && ViashError Bad arguments for option \'--api_file=*\': \'$VIASH_PAR_API_FILE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_API_FILE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --viash_yaml)
            [ -n "$VIASH_PAR_VIASH_YAML" ] && ViashError Bad arguments for option \'--viash_yaml\': \'$VIASH_PAR_VIASH_YAML\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_VIASH_YAML="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --viash_yaml. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --viash_yaml=*)
            [ -n "$VIASH_PAR_VIASH_YAML" ] && ViashError Bad arguments for option \'--viash_yaml=*\': \'$VIASH_PAR_VIASH_YAML\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_VIASH_YAML=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---setup)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$2"
            shift 1
            ;;
        ---setup=*)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
            shift 2
            ;;
        ---dockerfile)
            ViashDockerfile
            exit 0
            ;;
        ---v|---volume)
            VIASH_EXTRA_MOUNTS+=("--volume='$2'")
            shift 2
            ;;
        ---volume=*)
            VIASH_EXTRA_MOUNTS+=("--volume='$(ViashRemoveFlags "$2")'")
            shift 1
            ;;
        ---debug)
            VIASH_MODE='docker_debug'
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


ViashDockerInstallationCheck

if [ $VIASH_MODE == "docker_setup" ]; then
  ViashDockerSetup 'ghcr.io/openproblems-bio/openproblems/common/create_component:build_main' "$VIASH_DOCKER_SETUP_STRATEGY"
  exit 0
fi
ViashDockerSetup 'ghcr.io/openproblems-bio/openproblems/common/create_component:build_main' ifneedbepullelsecachedbuild

if [ $VIASH_MODE == "docker_debug" ]; then
  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openproblems-bio/openproblems/common/create_component:build_main'"
  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openproblems-bio/openproblems/common/create_component:build_main'
  exit 0
fi

# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_LANGUAGE+x} ]; then
  VIASH_PAR_LANGUAGE="python"
fi
if [ -z ${VIASH_PAR_OUTPUT+x} ]; then
  VIASH_PAR_OUTPUT="src/tasks/${VIASH_PAR_TASK}/${VIASH_PAR_TYPE}s/${VIASH_PAR_NAME}"
fi
if [ -z ${VIASH_PAR_API_FILE+x} ]; then
  VIASH_PAR_API_FILE="src/tasks/${VIASH_PAR_TASK}/api/comp_${VIASH_PAR_TYPE}.yaml"
fi
if [ -z ${VIASH_PAR_VIASH_YAML+x} ]; then
  VIASH_PAR_VIASH_YAML="_viash.yaml"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_VIASH_YAML" ] && [ ! -e "$VIASH_PAR_VIASH_YAML" ]; then
  ViashError "Input file '$VIASH_PAR_VIASH_YAML' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# check whether value is belongs to a set of choices
if [ ! -z "$VIASH_PAR_LANGUAGE" ]; then
  VIASH_PAR_LANGUAGE_CHOICES=("python:r")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_LANGUAGE_CHOICES[*]}:" =~ ":$VIASH_PAR_LANGUAGE:" ]]; then
    ViashError '--language' specified value of \'$VIASH_PAR_LANGUAGE\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT")"
fi

# detect volumes from file arguments
VIASH_CHOWN_VARS=()
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")" )
  VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
  VIASH_CHOWN_VARS+=( "$VIASH_PAR_OUTPUT" )
fi
if [ ! -z "$VIASH_PAR_API_FILE" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_API_FILE")" )
  VIASH_PAR_API_FILE=$(ViashAutodetectMount "$VIASH_PAR_API_FILE")
fi
if [ ! -z "$VIASH_PAR_VIASH_YAML" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_PAR_VIASH_YAML")" )
  VIASH_PAR_VIASH_YAML=$(ViashAutodetectMount "$VIASH_PAR_VIASH_YAML")
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_RESOURCES_DIR")" )
  VIASH_META_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_EXECUTABLE")" )
  VIASH_META_EXECUTABLE=$(ViashAutodetectMount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_CONFIG")" )
  VIASH_META_CONFIG=$(ViashAutodetectMount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_EXTRA_MOUNTS+=( "$(ViashAutodetectMountArg "$VIASH_META_TEMP_DIR")" )
  VIASH_META_TEMP_DIR=$(ViashAutodetectMount "$VIASH_META_TEMP_DIR")
fi

# get unique mounts
VIASH_UNIQUE_MOUNTS=($(for val in "${VIASH_EXTRA_MOUNTS[@]}"; do echo "$val"; done | sort -u))

# change file ownership
function ViashPerformChown {
  if (( ${#VIASH_CHOWN_VARS[@]} )); then
    set +e
    eval docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} ghcr.io/openproblems-bio/openproblems/common/create_component:build_main -c "'chown $(id -u):$(id -g) --silent --recursive ${VIASH_CHOWN_VARS[@]}'"
    set -e
  fi
}
trap ViashPerformChown EXIT

# helper function for filling in extra docker args
VIASH_EXTRA_DOCKER_ARGS=""
if [ ! -z "$VIASH_META_MEMORY_MB" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --memory=${VIASH_META_MEMORY_MB}m"
fi
if [ ! -z "$VIASH_META_CPUS" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --cpus=${VIASH_META_CPUS}"
fi


# set dependency paths


ViashDebug "Running command: $(echo docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openproblems-bio/openproblems/common/create_component:build_main)"
cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openproblems-bio/openproblems/common/create_component:build_main
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-create_component-XXXXXX").py
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
from typing import Any
from pathlib import Path
import sys
import os
import re

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'task': $( if [ ! -z ${VIASH_PAR_TASK+x} ]; then echo "r'${VIASH_PAR_TASK//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'type': $( if [ ! -z ${VIASH_PAR_TYPE+x} ]; then echo "r'${VIASH_PAR_TYPE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'language': $( if [ ! -z ${VIASH_PAR_LANGUAGE+x} ]; then echo "r'${VIASH_PAR_LANGUAGE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'name': $( if [ ! -z ${VIASH_PAR_NAME+x} ]; then echo "r'${VIASH_PAR_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "r'${VIASH_PAR_OUTPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'api_file': $( if [ ! -z ${VIASH_PAR_API_FILE+x} ]; then echo "r'${VIASH_PAR_API_FILE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'viash_yaml': $( if [ ! -z ${VIASH_PAR_VIASH_YAML+x} ]; then echo "r'${VIASH_PAR_VIASH_YAML//\'/\'\"\'\"r\'}'"; else echo None; fi )
}
meta = {
  'functionality_name': $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "r'${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'resources_dir': $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "r'${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'executable': $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "r'${VIASH_META_EXECUTABLE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'config': $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo "r'${VIASH_META_CONFIG//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'temp_dir': $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "r'${VIASH_META_TEMP_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cpus': $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "int(r'${VIASH_META_CPUS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_b': $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "int(r'${VIASH_META_MEMORY_B//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kb': $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mb': $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gb': $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tb': $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pb': $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PB//\'/\'\"\'\"r\'}')"; else echo None; fi )
}
dep = {
  
}

## VIASH END

# import helper function
sys.path.append(meta["resources_dir"])
from read_and_merge_yaml import read_and_merge_yaml

def strip_margin(text: str) -> str:
  return re.sub("(^|\\n)[ \\t]*\\|", "\\\\1", text)

def create_config(par, component_type, pretty_name, script_path) -> str:
  info_str = generate_info(par, component_type, pretty_name)
  resources_str = generate_resources(par, script_path)
  docker_platform = generate_docker_platform(par)

  return strip_margin(f'''\\
    |# The API specifies which type of component this is.
    |# It contains specifications for:
    |#   - The input/output files
    |#   - Common parameters
    |#   - A unit test
    |__merge__: {os.path.relpath(par["api_file"], par["output"])}
    |
    |functionality:
    |  # A unique identifier for your component (required).
    |  # Can contain only lowercase letters or underscores.
    |  name: {par["name"]}
    |
    |  # Metadata for your component
    |  info:
    |{info_str}
    |  # Component-specific parameters (optional)
    |  # arguments:
    |  #   - name: "--n_neighbors"
    |  #     type: "integer"
    |  #     default: 5
    |  #     description: Number of neighbors to use.
    |
    |  # Resources required to run the component
    |  resources:
    |{resources_str}
    |platforms:
    |  # Specifications for the Docker image for this component.
    |{docker_platform}
    |  # This platform allows running the component natively
    |  - type: native
    |  # Allows turning the component into a Nextflow module / pipeline.
    |  - type: nextflow
    |    directives:
    |      label: [midtime,midmem, midcpu]
    |'''
  )

def generate_info(par, component_type, pretty_name) -> str:
  """Generate the functionality info for a component."""
  if component_type in ["method", "control_method"]:
    str = strip_margin(f'''\\
      |    # A relatively short label, used when rendering visualisarions (required)
      |    label: {pretty_name}
      |    # A one sentence summary of how this method works (required). Used when 
      |    # rendering summary tables.
      |    summary: "FILL IN: A one sentence summary of this method."
      |    # A multi-line description of how this component works (required). Used
      |    # when rendering reference documentation.
      |    description: |
      |      FILL IN: A (multi-line) description of how this method works.
      |    # Which normalisation method this component prefers to use (required).
      |    preferred_normalization: log_cp10k
      |''')
    if component_type == "method":
      str += strip_margin(f'''\\
        |    # A reference key from the bibtex library at src/common/library.bib (required).
        |    reference: bibtex_reference_key
        |    # URL to the documentation for this method (required).
        |    documentation_url: https://url.to/the/documentation
        |    # URL to the code repository for this method (required).
        |    repository_url: https://github.com/organisation/repository
        |''')
    return str
  elif component_type == "metric":
    return strip_margin(f'''\\
      |    metrics:
      |      # A unique identifier for your metric (required).
      |      # Can contain only lowercase letters or underscores.
      |      name: {par["name"]}
      |      # A relatively short label, used when rendering visualisarions (required)
      |      label: {pretty_name}
      |      # A one sentence summary of how this metric works (required). Used when 
      |      # rendering summary tables.
      |      summary: "FILL IN: A one sentence summary of this metric."
      |      # A multi-line description of how this component works (required). Used
      |      # when rendering reference documentation.
      |      description: |
      |        FILL IN: A (multi-line) description of how this metric works.
      |      # A reference key from the bibtex library at src/common/library.bib (required).
      |      reference: bibtex_reference_key
      |      # URL to the documentation for this metric (required).
      |      documentation_url: https://url.to/the/documentation
      |      # URL to the code repository for this metric (required).
      |      repository_url: https://github.com/organisation/repository
      |      # The minimum possible value for this metric (required)
      |      min: 0
      |      # The maximum possible value for this metric (required)
      |      max: 1
      |      # Whether a higher value represents a 'better' solution (required)
      |      maximize: true
      |''')


def generate_resources(par, script_path) -> str:
  """Add the script to the functionality resources."""
  if par["language"] == "python":
    type_str = "python_script"
  elif par["language"] == "r":
    type_str = "r_script"

  return strip_margin(f'''\\
    |    # The script of your component (required)
    |    - type: {type_str}
    |      path: {script_path}
    |    # Additional resources your script needs (optional)
    |    # - type: file
    |    #   path: weights.pt
    |''')

def generate_docker_platform(par) -> str:
  """Set up the docker platform for Python."""
  if par["language"] == "python":
    image_str = "openproblems/base_python:1.0.0"
    setup_type = "python"
    package_example = "scib==1.1.5"
  elif par["language"] == "r":
    image_str = "openproblems/base_r:1.0.0"
    setup_type = "r"
    package_example = "tidyverse"
  return strip_margin(f'''\\
    |  - type: docker
    |    image: {image_str}
    |    # Add custom dependencies here (optional). For more information, see
    |    # https://viash.io/reference/config/platforms/docker/#setup .
    |    # setup:
    |    #   - type: {setup_type}
    |    #     packages: {package_example}
    |''')

def set_par_values(config) -> None:
  """Adds values to each of the arguments in a config file."""
  args = config['functionality']['arguments']
  for argi, arg in enumerate(args):
    key = re.sub("^-*", "", arg['name'])

    # find value
    if arg["type"] != "file":
      value = arg.get("default", arg.get("example", "..."))
    elif arg.get("direction", "input") == "input":
      key_strip = key.replace("input_", "")
      value = f'resources_test/{par["task"]}/pancreas/{key_strip}.h5ad'
    else:
      key_strip = key.replace("output_", "")
      value = f'{key_strip}.h5ad'

    # store key and value
    config['functionality']['arguments'][argi]["key"] = key
    config['functionality']['arguments'][argi]["value"] = value
  
def look_for_adata_arg(args, uns_field):
  """Look for an argument that has a .uns[uns_field] in its info.slots."""
  for arg in args:
    uns = arg.get("info", {}).get("slots", {}).get("uns", [])
    for unval in uns:
      if unval.get("name") == uns_field:
        return arg["key"]
  return "adata"

def write_output_python(arg, copy_from_adata, is_metric):
  """Create code for writing the output h5ad files."""
  slots = arg.get("info", {}).get("slots", {})
  outer = []
  for group_name, slots in slots.items():
    inner = []
    for slot in slots:
      if group_name == "uns" and slot["name"] in ["dataset_id", "normalization_id"]:
        value = f"{copy_from_adata}.uns['{slot['name']}']"
      elif group_name == "uns" and slot["name"] == "method_id":
        if is_metric:
          value = f"{copy_from_adata}.uns['{slot['name']}']"
        else:
          value = "meta['functionality_name']"
      else:
        value = group_name + "_" + slot["name"]
      inner.append(f"'{slot['name']}': {value}")
    inner_values = ',\\n    '.join(inner)
    outer.append(f"{group_name}={{\\n    {inner_values}\\n  }}")
  outer_values = ',\\n  '.join(outer)
  return strip_margin(
    f'''\\
      |print("Write {arg["key"]} AnnData to file", flush=True)
      |{arg["key"]} = ad.AnnData(
      |  {outer_values}
      |)
      |{arg["key"]}.write_h5ad(par['{arg["key"]}'], compression='gzip')'''
  )

def write_output_r(arg, copy_from_adata, is_metric):
  """Create code for writing the output h5ad files."""
  slots = arg.get("info", {}).get("slots", {})
  outer = []
  for group_name, slots in slots.items():
    inner = []
    for slot in slots:
      if group_name == "uns" and slot["name"] in ["dataset_id", "normalization_id"]:
        value = f"{copy_from_adata}\$uns[[\\"{slot['name']}\\"]]"
      elif group_name == "uns" and slot["name"] == "method_id":
        if is_metric:
          value = f"{copy_from_adata}\$uns[[\\"{slot['name']}\\"]]"
        else:
          value = "meta[[\\"functionality_name\\"]]"
      else:
        value = group_name + "_" + slot["name"]
      inner.append(f"{slot['name']} = {value}")
    inner_values = ',\\n    '.join(inner)
    outer.append(f"{group_name} = list(\\n    {inner_values}\\n  )")
  outer_values = ',\\n  '.join(outer)
  return strip_margin(
    f'''\\
      |cat("Write {arg["key"]} AnnData to file\\\\n")
      |{arg["key"]} <- anndata::AnnData(
      |  {outer_values}
      |)
      |{arg["key"]}\$write_h5ad(par[["{arg["key"]}"]], compression = "gzip")'''
  )

def create_python_script(par, config, type):
  args = config['functionality']['arguments']

  # create the arguments of the par string
  par_string = ",\\n  ".join(f"'{arg['key']}': '{arg['value']}'" for arg in args)

  # create code for reading the input h5ad file
  read_h5ad_string = "\\n".join(
    f"{arg['key']} = ad.read_h5ad(par['{arg['key']}'])"
    for arg in args
    if arg['type'] == "file"
    and arg.get('direction', "input") == "input"
  )

  # determine which adata to copy from
  copy_from_adata = look_for_adata_arg(args, "method_id" if type == "metric" else "dataset_id")

  # create code for writing the output h5ad files
  write_h5ad_string = "\\n".join(
    write_output_python(arg, copy_from_adata, type == "metric")
    for arg in args
    if arg["type"] == "file"
    and arg.get("direction", "input") == "output"
  )

  if type == 'metric':
    processing_string = strip_margin(f'''\\
      |print('Compute metrics', flush=True)
      |# metric_ids and metric_values can have length > 1
      |# but should be of equal length
      |uns_metric_ids = [ '{par['name']}' ]
      |uns_metric_values = [ 0.5 ]''')
  else:
    processing_string = strip_margin(f'''\\
      |print('Preprocess data', flush=True)
      |# ... preprocessing ...
      |
      |print('Train model', flush=True)
      |# ... train model ...
      |
      |print('Generate predictions', flush=True)
      |# ... generate predictions ...''')

  script = strip_margin(f'''\\
    |import anndata as ad
    |
    |## VIASH START
    |# Note: this section is auto-generated by viash at runtime. To edit it, make changes
    |# in config.vsh.yaml and then run \`viash config inject config.vsh.yaml\`.
    |par = {{
    |  {par_string}
    |}}
    |meta = {{
    |  'functionality_name': '{par["name"]}'
    |}}
    |## VIASH END
    |
    |print('Reading input files', flush=True)
    |{read_h5ad_string}
    |
    |{processing_string}
    |
    |{write_h5ad_string}
    |''')

  return script

def create_r_script(par, api_spec, type):
  args = api_spec['functionality']['arguments']

  # create the arguments of the par string
  par_string = ",\\n  ".join(f'{arg["key"]} = "{arg["value"]}"' for arg in args)

  # create helpers for reading the h5ad file
  read_h5ad_string = "\\n".join(
    f'{arg["key"]} <- anndata::read_h5ad(par[["{arg["key"]}"]])'
    for arg in args
    if arg['type'] == "file"
    and arg.get("direction", "input") == "input"
  )

  # determine which adata to copy from
  copy_from_adata = look_for_adata_arg(args, "method_id" if type == "metric" else "dataset_id")

  # create code for writing the output h5ad files
  write_h5ad_string = "\\n".join(
    write_output_r(arg, copy_from_adata, type == "metric")
    for arg in args
    if arg["type"] == "file"
    and arg.get("direction", "input") == "output"
  )

  if type == 'metric':
    processing_string = strip_margin(f'''\\
      |cat("Compute metrics\\\\n")
      |# metric_ids and metric_values can have length > 1
      |# but should be of equal length
      |uns_metric_ids <- c("{par['name']}")
      |uns_metric_values <- c(0.5)''')
  else:
    processing_string = strip_margin(f'''\\
      |cat("Preprocess data\\\\n")
      |# ... preprocessing ...
      |
      |cat("Train model\\\\n")
      |# ... train model ...
      |
      |cat("Generate predictions\\\\n")
      |# ... generate predictions ...''')

  script = strip_margin(f'''\\
    |library(anndata)
    |
    |## VIASH START
    |par <- list(
    |  {par_string}
    |)
    |meta <- list(
    |  functionality_name = "{par["name"]}"
    |)
    |## VIASH END
    |
    |cat("Reading input files\\\\n")
    |{read_h5ad_string}
    |
    |{processing_string}
    |
    |{write_h5ad_string}
    |''')

  return script

# def read_viash_config(file):
#   file = file.absolute()

#   # read in config
#   command = ["viash", "config", "view", str(file)]

#   # Execute the command and capture the output
#   output = subprocess.check_output(
#     command,
#     universal_newlines=True,
#     cwd=str(file.parent)
#   )

#   # Parse the output as YAML
#   config = yaml.load(output)

#   return config


def main(par):
  ####### CHECK INPUTS #######
  print("Check inputs", flush=True)
  assert re.match("[a-z][a-z0-9_]*", par["name"]), "Name should match the regular expression '[a-z][a-z0-9_]*'. Example: 'my_component'."
  assert len(par['name']) <= 50, "Method name should be at most 50 characters."

  pretty_name = re.sub("_", " ", par['name']).title()

  ####### CHECK LANGUAGE #######
  print("Check language", flush=True)
  # check language and determine script path
  if par["language"] == "python":
    script_path = "script.py"
  elif par["language"] == "r":
    script_path = "script.R"
  else:
    sys.exit(f"Unrecognized language parameter '{par['language']}'.")

  ## CHECK API FILE
  print("Check API file", flush=True)
  api_file = Path(par["api_file"])
  viash_yaml = Path(par["viash_yaml"])
  project_dir = viash_yaml.parent
  if not api_file.exists():
    comp_types = [x.with_suffix("").name.removeprefix("comp_") for x in api_file.parent.glob("**/comp_*.y*ml")]
    list.sort(comp_types)
    sys.exit(strip_margin(f"""\\
      |Error: Invalid --type argument.
      |  Reason: Could not find API file at '{api_file.relative_to(project_dir)}'.
      |  Possible values for --type: {', '.join(comp_types)}."""))
  
  ## READ API FILE
  print("Read API file", flush=True)
  api = read_and_merge_yaml(api_file)
  comp_type = api.get("functionality", {}).get("info", {}).get("type", {})
  if not comp_type:
    sys.exit(strip_margin(f"""\\
      |Error: API file is incorrectly formatted.
      |  Reason: Could not find component type at \`.functionality.info.type\`.'
      |  Please fix the formatting of the API file."""))

  ####### CREATE OUTPUT DIR #######
  print("Create output dir", flush=True)
  out_dir = Path(par["output"])
  out_dir.mkdir(exist_ok=True)

  ####### CREATE CONFIG #######
  print("Create config", flush=True)
  config_file = out_dir / "config.vsh.yaml"

  # get config template
  config_str = create_config(par, comp_type, pretty_name, script_path)

  with open(config_file, "w") as f:
    f.write(config_str)

  ####### CREATE SCRIPT #######
  print("Create script", flush=True)
  script_file = out_dir / script_path

  # set reasonable values
  set_par_values(api)

  if par["language"] == "python":
    script_out = create_python_script(par, api, comp_type)

  if par["language"] == "r":
    script_out = create_r_script(par, api, comp_type)
  
  # write script
  with open(script_file, "w") as f:
    f.write(script_out)

  print("Done!", flush=True)


if __name__ == "__main__":
  main(par)
VIASHMAIN
python -B "\$tempscript" &
wait "\$!"

VIASHEOF


# strip viash automount from file paths
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_PAR_OUTPUT=$(ViashStripAutomount "$VIASH_PAR_OUTPUT")
fi
if [ ! -z "$VIASH_PAR_API_FILE" ]; then
  VIASH_PAR_API_FILE=$(ViashStripAutomount "$VIASH_PAR_API_FILE")
fi
if [ ! -z "$VIASH_PAR_VIASH_YAML" ]; then
  VIASH_PAR_VIASH_YAML=$(ViashStripAutomount "$VIASH_PAR_VIASH_YAML")
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_META_RESOURCES_DIR=$(ViashStripAutomount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_META_EXECUTABLE=$(ViashStripAutomount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_META_CONFIG=$(ViashStripAutomount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_META_TEMP_DIR=$(ViashStripAutomount "$VIASH_META_TEMP_DIR")
fi


# check whether required files exist
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -e "$VIASH_PAR_OUTPUT" ]; then
  ViashError "Output file '$VIASH_PAR_OUTPUT' does not exist."
  exit 1
fi


exit 0
